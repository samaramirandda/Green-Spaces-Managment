@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Collaborator" as COLLABORATOR
participant ":ConsultTasksUI" as UI
participant ":ConsultTasksController" as CTRL
participant ":Repositories" as REP
participant "repositories\n:Repositories" as REPS
participant "agenda:\nAgenda" as AGENDA
participant ":EntryMapper" as entryMAPPER
participant "entryListDto\n:List<entryDto>" as entryListDTO
participant "authenticationRepository:\nAuthenticationRepository" as authentication
participant "authenticationFacade:\nAuthFacade" as authFacade
participant "user:\nUserSession" as user
participant "entry:\nEntry" as ENTRY

activate COLLABORATOR

COLLABORATOR -> UI : Requests to consult tasks between a date
    activate UI


    UI -> CTRL : getTasksForCollaboratorBetweenDates(startDate, endDate)
        activate CTRL

            CTRL -> CTRL: getEmailCollaboratorFromSession()

            CTRL -> REP: getInstance()
            activate REP

            REP --> CTRL: repositories
            deactivate REP

            CTRL -> REPS: getAuthenticationRepository()
            activate REPS

            REPS --> CTRL: authenticationRepository
            deactivate REPS

            CTRL -> authentication: getCurrentUserSession()
            activate authentication

            authentication --> CTRL: authenticationFacade
            deactivate authentication

            CTRL -> authFacade: getCurrentUserSession()
            activate authFacade

            authFacade --> CTRL: userSession
            deactivate authFacade

            CTRL -> user: getUserId()
            activate user

            user --> CTRL: email
            deactivate user

            CTRL --> CTRL: email



        CTRL -> REP : getInstance()
        activate REP

        REP --> CTRL: repositories
        deactivate REP

        CTRL -> REPS : getAgenda()
        activate REPS

        REPS --> CTRL: agenda
        deactivate REPS

        CTRL -> AGENDA : getTasksForCollaboratorBetweenDates (collaboratorEmail, startDate, endDate)
        activate AGENDA

                AGENDA -> "tasksCollaborator\n:List<Entry>"** : create

                loop For each entry in agenda

                    AGENDA -> ENTRY : getStartingDate()
                    activate ENTRY

                    ENTRY --> AGENDA : startingDate
                    deactivate ENTRY

                    AGENDA -> AGENDA : checkDateWithinRange(startingDate, startDate, endDate)
                    activate AGENDA

                    AGENDA --> AGENDA
                    deactivate AGENDA

                    AGENDA -> ENTRY : getTeamAssign()
                    activate ENTRY

                    ENTRY --> AGENDA : teamAssign
                    deactivate ENTRY

                loop For each collaborator in teamAssign

                AGENDA -> user : getEmail()
                activate user

                user --> AGENDA : email
                deactivate user

                alt email == collaboratorEmail

                AGENDA -> "tasksCollaborator\n:List<Entry>" : add(entry)
                activate "tasksCollaborator\n:List<Entry>"

                "tasksCollaborator\n:List<Entry>" --> AGENDA
                deactivate "tasksCollaborator\n:List<Entry>"

                end

                end loop

                end loop



            AGENDA --> CTRL : tasksCollaborator
            deactivate AGENDA

            CTRL -> entryMAPPER: toDTOList(entryListDTO)
            activate entryMAPPER

            activate "tasksCollaborator\n:List<Entry>"
            entryMAPPER -> "tasksCollaborator\n:List<Entry>" : create()

            loop For each task space in entryListDTO

                entryMAPPER -> entryListDTO: entryListToDTO(entry))
                deactivate "tasksCollaborator\n:List<Entry>"
                activate entryListDTO

                entryListDTO --> entryMAPPER: entryListDTO
                deactivate entryListDTO

                entryMAPPER -> "tasksCollaborator\n:List<Entry>": add(task)
                activate "tasksCollaborator\n:List<Entry>"
            end

                "tasksCollaborator\n:List<Entry>" --> entryMAPPER: tasksCollaborator
                deactivate "tasksCollaborator\n:List<Entry>"

            entryMAPPER --> CTRL : tasksCollaborator
            deactivate entryMAPPER

        CTRL --> UI : tasksCollaborator
        deactivate CTRL

    UI --> COLLABORATOR : Shows list of tasks
    deactivate UI


deactivate COLLABORATOR
@enduml